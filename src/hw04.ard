\import Utils
\import hw02 (if)
\import lect03 (==)
\import lect04

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\data T (b : Bool) \with
  | true => tt

\func lookup {A : \Type} {n : Nat} (l : List A) (i : Fin n) (p : T (n < length l)) : A \elim n, l, i, p
  | suc n, cons a l, fzero, p => a
  | suc n, cons a l, fsuc f, p => lookup l f p

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).
\func replicate {A : \Type} (n : Nat) (a : A) : vec A n \elim n
  | 0 => ()
  | suc n => (a, replicate n a)

\func replicate' {A : \Type} (n : Nat) (a : A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons a (replicate' n a)

-- 3. Реализуйте аналоги функции map для vec и Vec.
\func map {A : \Type} {B : \Type} {n : Nat} (v : vec A n) (f : A -> B) : vec B n \elim n
  | 0 => ()
  | suc n => (f v.1, map v.2 f)

\func map' {A B : \Type} {n : Nat} (v : Vec A n) (f : A -> B) : Vec B n \elim n, v
  | 0, vnil => vnil
  | suc n, vcons a v => vcons (f a) (map' v f)

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWith {A B : \Type} {n : Nat} (v : vec A n) (u : vec B n) : vec (\Sigma A B) n \elim n
  | 0 => ()
  | suc n => ((v.1, u.1), zipWith v.2 u.2)

\func zipWith' {A B : \Type} {n : Nat} (v : Vec A n) (u : Vec B n) : Vec (\Sigma A B) n \elim n, v, u
  | 0, vnil, vnil => vnil
  | suc n, vcons a v, vcons a1 v1 => vcons (a, a1) (zipWith' v v1)

-- 5. Функции Fin n → A соответствуют спискам элементов A длины n.
--    Функция, преобразующая Vec A n в Fin n → A, была реализована на лекции.
--    Реализуйте обратную функцию.

\func toFin (n : Nat) : Fin (suc n) \elim n
  | 0 => fzero
  | suc n => fsuc (toFin n)

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons (f (toFin n)) (coin (\lam (x : Fin n) => f (next x)))
    \where
      \func next {n : Nat} (x : Fin n) : Fin (suc n) \elim n, x
        | suc n, fzero => fsuc fzero
        | suc n, fsuc f => fsuc (next f)

-- 6. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => Vec (Vec A m) n

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n \elim n
  | 0 => vnil
  | suc n => vcons (vcons e (replicate' n z)) (map' (diag z e n) (vcons z))

-- транспонирование матриц

-- actually truer to the Haskell zipWith than the ones above
\func zipWithMap {A B C : \Type} {n : Nat} (f : A -> B -> C) (v : Vec A n) (u : Vec B n) : Vec C n \elim n, v, u
  | 0, vnil, vnil => vnil
  | suc n, vcons a v, vcons b u => vcons (f a b) (zipWithMap f v u)

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n \elim n, M
  | 0, vnil => replicate' m vnil
  | suc n, vcons a v => zipWithMap vcons a (transpose v)

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m \elim n, M, N
  | 0, vnil, vnil => vnil
  | suc n, vcons a v, vcons b u => vcons (zipWithMap add a b) (matAdd add n m v u)

-- умножение матриц

-- z ─ нейтральный элемент по сложению.
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k \elim n, M
  | 0, vnil => vnil
  | suc n, vcons a v => vcons (map' (transpose N) (\lam x => sumVec z add (zipWithMap mul a x))) (matMul z add mul n m k v N)
    \where
      \func sumVec {A : \Type} {n : Nat} (z : A) (add : A -> A -> A) (v : Vec A n) : A \elim n, v
        | 0, vnil => z
        | suc n, vcons a v => add a (sumVec z add v)

-- 7. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => CLeaf
  | suc n => CNode A (CTree A n) (CTree A n)

-- 8. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | 0 => leaf
  | suc n => node A (Tree A n) (Tree A n)

-- определите функцию, возвращающую высоту дерева.

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) \elim n, t
  | 0, leaf => fzero
  | suc n, node a t t1 => fsuc (maxFin (height n t) (height n t1))
  \where
    \func maxFin {n : Nat} (i : Fin n) (j : Fin n) : Fin n => \case (toNat j < toNat i) \with {
      | true => i
      | false => j
    }
    -- sidenote: why doesn't `if (toNat j < toNat i) i j` work? 'Expected type: Bool; Actual type: Bool'???

