\import Utils
\import hw03
\import lect04
\import lect05 (+-comm, Nat-elim, Nat-rec, trans)
\open Nat \hiding (<=)

-- 1. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => f a b = f a' x) q (transport (\lam y => f a b = f y b) p idp)

-- 2. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b

-- 3. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\data List (A : \Type) | nil | cons A (List A)

\func \infixl 4 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => reverse xs ++ cons x nil

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | cons a l => pmap (cons a) (++-assoc l ys zs)

\func ++nil1 {A : \Type} (xs : List A) : xs ++ nil = xs \elim xs
  | nil => idp
  | cons a l => pmap (cons a) (++nil1 l)

\func ++nil2 {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
  | nil => idp
  | cons a l => pmap (cons a) (++nil2 l)

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => ++nil2 (reverse ys)
  | cons a l => trans (pmap (\lam u => u ++ (cons a nil)) (reverse++ l ys)) (++-assoc (reverse ys) (reverse l) (cons a nil))

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | cons a l => trans (reverse++ (reverse l) (cons a nil)) (pmap (cons a) (reverse-isInvolutive l))

-- 4. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim k
  | 0 => idp
  | suc k => trans ((pmap (\lam u => u + n) (ldistr n m k))) (+-assoc (n * m) (n * k) n)

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n =>
    (m + k) * n + (m + k) ==< pmap (\lam x => x + (m + k)) (rdistr n m k) >==
    m * n + k * n + (m + k) ==< +-assoc (m * n) (k * n) (m + k) >==
    m * n + (k * n + (m + k)) ==< pmap (\lam x => m * n + x) (sym (+-assoc (k * n) m k)) >==
    m * n + (k * n + m + k) ==< pmap (\lam x => m * n + (x + k)) (+-comm (k * n) m) >==
    m * n + (m + k * n + k) ==< pmap (\lam x => m * n + x) (+-assoc m (k * n) k) >==
    m * n + (m + ((k * n) + k)) ==< sym (+-assoc (m * n) m ((k * n) + k)) >==
    m * n + m + (k * n + k) `qed


-- 5. Докажите, что (\lam x => not (not x)) = (\lam x => x).

\func not (b : Bool) : Bool
  | true => false
  | false => true

\func notNotId : (\lam x => not (not x)) = (\lam x => x) => path (\lam i x => notNot x @ i)
    \where
      \func notNot (x : Bool) : (not (not x) = x) \elim x
        | true => idp
        | false => idp

-- 6. Определите факториал через Nat-rec.

\func fac' (n : Nat) : Nat => Nat-rec Nat 1 (\lam m k => (suc m) * k) n

-- 7. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.

\func +-assoc' (x y z : Nat) : x + y + z = x + (y + z) =>
  Nat-elim (\lam z => x + y + z = x + (y + z)) idp (\lam _ p => pmap suc p) z

-- 8. Определите рекурсор и элиминатор для D.

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-rec (P : \Type)
            (c1 : Nat -> P)
            (c2 : D -> D -> P -> P -> P)
            (c3 : (Nat -> D) -> (Nat -> P) -> P)
            (x : D) : P \elim x
  | con1 n => c1 n
  | con2 d d1 => c2 d d1 (D-rec P c1 c2 c3 d) (D-rec P c1 c2 c3 d1)
  | con3 _x => c3 _x (\lam x => D-rec P c1 c2 c3 (_x x))

-- 9. Определите рекурсор и элиминатор для List.

\func List-rec {A : \Type}
               (P : \Type)
               (z : P)
               (s : A -> (List A)-> P -> P)
               (xs : List A) : P \elim xs
  | nil => z
  | cons a l => s a l (List-rec P z s l)

\func List-elim {A : \Type }
                (P : List A -> \Type)
                (z : P nil)
                (s : \Pi (x : A) (xs : List A) -> P xs -> P (cons x xs))
                (xs : List A) : P xs \elim xs
  | nil => z
  | cons a l => s a l (List-elim P z s l)

-- 10. Докажите, что 0 не равно suc x.

\func zero/=suc (x : Nat) (p : 0 = suc x) : Empty => transport isZero p ()
    \where
      \func isZero (x : Nat) : \Type \elim x
        | 0 => \Sigma
        | suc n => Empty

-- 11. Докажите, что fac не равен suc.

\open Nat(*)

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func fac/=suc (p : fac = suc) : Empty => transport isFac p ()
    \where
      \func isFac (f : Nat -> Nat) : \Type => \case f 1 \with {
        | 1 => \Sigma
        | n => Empty
      }

-- 12. Докажите, что left = right, не используя transport, coe и паттерн матчинг с idp.

\func left=right : left = right => path (\lam i => i)

-- 13. Докажите, что если a = a' и b = b', то (a,b) = (a',b'), не используя transport, coe и паттерн матчинг с idp.

\func pairEq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a,b) = (a',b') =>
  path (\lam i => (p @ i, q @ i))

-- 14. Докажите, что если p = p', то p.1 = p'.1, не используя transport, coe и паттерн матчинг с idp.

\func projEq {A : \Type} (B : A -> \Type) {p p' : \Sigma (x : A) (B x)} (t : p = p') : p.1 = p'.1 =>
  path (\lam i => (t @ i).1)

-- 15. Докажите pmap2, не используя transport, coe и паттерн матчинг с idp.

\func pmap2' {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  path (\lam i => f (p @ i) (q @ i))

-- 16. Мы видели как определить transport через coe. Определите частный случай coe через transport.
--     Можно ли определить transport через coe0?

\func coe0 (A : I -> \Type) (a : A left) : A right => transport A (path (\lam i => i)) a

-- 17. Определите функцию B right -> B left.

\func Itr' {B : I -> \Type} (b : B right) : B left => transport B (sym left=right) b

-- 18. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => J (B a) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- 1. Выразите transport через Jalt.
-- 2. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- 3. Используя эти две конструкции, легко определить J.

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  Jalt (\lam x y z => B x -> B y) (\lam _ y => y) p b

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a, idp) = {\Sigma (x : A) (a = x)} p =>
  Jalt (\lam x y z => (x, idp) = {\Sigma (a : A) (x = a)} (y, z)) (\lam x => idp) p.2

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p => transport'' (\lam x => B x.1 x.2) (sigma-contr (a', p)) b
