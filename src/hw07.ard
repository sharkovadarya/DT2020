\import Utils
\import hw02 (gcd)
\import hw05 (pmap2)
\import hw06
\import lect05 (funExt)
\import lect06 (DecEq, Decide, no, yes)
\import lect07

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim  p
  | (a,b) => \new Pair {
    | fst_ => b
    | snd_ => a
  }

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair {
  | fst_ => p.snd_
  | snd_ => p.fst_
}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p \elim p
  | (a,b) => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => p.p

\func one-isPos : PosNat 1 => \new PosNat 1 ()

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record CoprimePair (n m : Nat) (p : gcd n m = 1)

-- Нужно определить тип, а это функция, которая каждому числу, взаимно простому с 60, сопоставляет доказательство, что это верно.
\func CoprimePair60 (n : Nat) (p : gcd n 60 = 1) : CoprimePair n 60 p => \new CoprimePair n 60 p

-- 5. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\func cons/=nil {A : \Type} (a : A) (xs : List A) (p : cons a xs = nil) : Empty =>
  transport (\lam xs => \case xs \with { | nil => Empty | cons _ _ => \Sigma }) p ()

\func head {A : \Type} (d : A) (xs : List A) : A \elim xs
  | nil => d
  | cons a l => a

\func tail {A : \Type} (xs : List A) : List A \elim xs
  | nil => nil
  | cons a l => l

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => \lam x y => helper dec x y
    \where
      \func helper {A : \Type} (dec : Eq A) (xs : List A) (ys : List A) : Decide (xs = ys) \elim xs, ys
        | nil, nil => yes idp
        | nil, cons a l => no (\lam x => cons/=nil a l (sym x))
        | cons a l, nil => no (\lam x => cons/=nil a l x)
        | cons a l, cons a1 l1 => \case (decideEq a a1), (helper dec l l1) \with {
          | yes n, yes p => yes (pmap2 cons n p)
          | yes a, no n => no (\lam x => n (pmap tail x))
          | no n, _ => no (\lam x => n (pmap (head a) x))
        }

-- 6. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Type} : A -> F A
  | \infixl 1 >>= {A B : \Type} : F A -> (A -> F B) -> F B
  | left-id {A B : \Type} (a : A) (f : A -> F B) : ((return a) >>= f) = f a
  | right-id {A : \Type} (ma : F A) : (ma >>= return) = ma
  | bind-assoc {A B C : \Type} (ma : F A) (f : A -> F B) (g : B -> F C) : (ma >>= (\lam x => f x >>= g)) = (ma >>= f >>= g)
  | fmap f ma => ma >>= (\lam x => return (f x))
  | fmap-id {A : \Type} (y : F A) => right-id y
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : F A) =>
    (y >>= (\lam x => return (g (f x))))
          ==< sym (path (\lam i => y >>= (\lam x => ((left-id (f x) (\lam x => return (g x))) @ i)))) >==
    (y >>= (\lam x => return (f x) >>= (\lam x => return (g x))))
          ==< bind-assoc y (\lam x => return (f x)) (\lam x => return (g x)) >==
    ((y >>= (\lam x => return (f x))) >>= (\lam x => return (g x))) `qed

-- 7. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | return => just
  | \infixl 1 >>= {A B : \Type} (ma : Maybe A) (f : A -> Maybe B) : Maybe B \elim ma {
    | nothing => nothing
    | just a => f a
  }
  | left-id a f => idp
  | right-id {A : \Type} (ma : Maybe A) : (ma >>= just ) = ma \elim ma {
    | nothing => idp
    | just a => idp
  }
  | bind-assoc {A B C : \Type} (ma : Maybe A) (f : A -> Maybe B) (g : B -> Maybe C) :
               (ma >>= (\lam x => f x >>= g)) = (ma >>= f >>= g) \elim ma {
    | nothing => idp
    | just a => idp
  }

-- 8. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Type) : Monad (\lam A => State S A)
  | return a => \new State {
    | state s => (s, a)
  }
  | >>= st f => \new State {
    | state s => state {f (state {st} s).2} (state {st} s).1
  }
  | left-id a f => idp
  | right-id ma => idp
  | bind-assoc ma f g => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

-- 9. Определите \instance Monad для Term.

\func fMaybe {A B : \Type} (f : A -> Term B) (a : Maybe A)  : Term (Maybe B) \elim a
  | nothing => var nothing
  | just a => termMaybe (f a)

\func termMaybe {A : \Type} (a : Term A) : Term (Maybe A) \elim a
  | var v => var (just v)
  | unit => unit
  | app t t1 => app (termMaybe t) (termMaybe t1)
  | lam t => lam (termMaybe t)

\func varEq {A : \Type} : var = fMaybe {A} var =>
  funExt (\lam _ => Term (Maybe A)) {var} {fMaybe {A} var} (\lam x => \case \elim x \with {
    | nothing => idp
    | just a => idp
  })

\instance TermMonad : Monad Term
  | return a => var a
  | \infixl 1 >>= {A B : \Type} (ma : Term A) (f : A -> Term B) : Term B \elim ma {
    | var v => f v
    | unit => unit
    | app t1 t2 => app (t1 >>= f) (t2 >>= f)
    | lam t => lam (t >>= (fMaybe f))
  }
  | left-id a f => idp
  | right-id {A : \Type} (ma : Term A) : (ma >>= var) = ma \elim ma {
    | var v => idp
    | unit => idp
    | app t t1 => pmap (\lam x => app x (t1 >>= var)) (right-id t) *> pmap (\lam x => app t x) (right-id t1)
    | lam t => pmap lam (transport (\lam x => (t >>= x) = t) varEq (right-id t))
  }
  | bind-assoc {A B C : \Type} (ma : Term A) (f : A -> Term B) (g : B -> Term C) :
               (ma >>= (\lam x => f x >>= g)) = (ma >>= f >>= g) \elim ma {
    | var v => idp
    | unit => idp
    | app t t1 => pmap (\lam x => app (t >>= (\lam x => f x >>= g)) x) (bind-assoc t1 f g) *>
                  pmap (\lam x => app x (t1 >>= f >>= g)) (bind-assoc t f g)
    | lam t => pmap lam (sym (pmap (\lam x => t >>= x) (fMaybePush f g)) *> bind-assoc t (fMaybe f) (fMaybe g))
  }
  \where {
    \func fMaybePush {A B C : \Type} (f : A -> Term B) (g : B -> Term C) :
                     (\lam x => fMaybe f x >>= fMaybe g) = fMaybe (\lam x => f x >>= g) =>
      funExt (\lam _ => Term (Maybe C)) {(\lam x => (fMaybe f) x >>= fMaybe g)} {fMaybe (\lam x => f x >>= g)}
             (\lam a => \case \elim a \with {
               | nothing => idp
               | just a => helper (f a) g
             })
    \func helper {A B : \Type} (a : Term A) (f : A -> Term B) : (termMaybe a >>= fMaybe f) = termMaybe (a >>= f) \elim a
      | var v => idp
      | unit => idp
      | app t t1 => pmap (\lam x => app (termMaybe t >>= fMaybe f) x) (helper t1 f) *>
                    pmap (\lam x => app x (termMaybe (t1 >>= f))) (helper t f)
      | lam t => pmap lam (helper t (fMaybe f))
  }

-- 10. Определите отношение многошаговой редукции на Term.

\func Red {V : \Type} (t s : Term V) : \Type => ReflTransClosure Red1 t s

-- 11. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--     Определите любую стратегию редукции.

\func strategy {V : \Type} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) => {?}

-- 12. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Type} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  => {?}

\func substLem1 => {?}

-- 13. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Type} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  => {?}

-- 14. Закончите доказательство утверждения, что все типизируемые термы достижимы.

-- Это более общее утверждение необходимо для усиления индукционной гипотезы.
-- Для его доказательства потребуется вспомогательная лемма, которая говорит, что если термы a и b достижимы, и b[a/x] лежит в интерпретации B, то и (\x.b) a лежит в ней.
\func typeableInterp {V : \Type} (ctx : V -> Type) (env : V -> Term V) (C : \Pi (v : V) -> Interp (ctx v) (env v)) (t : Term V) (T : Type) (p : hasType ctx t T)
  : Interp T (t >>= env) => {?}

-- Это утверждение легко следует из предыдущего.
\func typeableInterpId {V : \Type} (ctx : V -> Type) (t : Term V) (T : Type) (p : hasType ctx t T)
  : Interp T t => {?}
