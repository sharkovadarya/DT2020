\import hw01
\import hw05 (zero/=suc)
\import lect06
\import lect09
\import Utils

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) => \lam x y t => p x y (q (f x) (f y) t)

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f => \lam x y t => p x y (pmap g t)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func divisibleBy3 (n : Nat) : Bool => \case mod3 n \with {
  | 0 => true
  | suc n => false
}

\func divisibleBy5 (n : Nat) : Bool => \case mod5 n \with {
  | 0 => true
  | suc n => false
}

\func isMultipleOf3Or5 (n : Nat) : \Type => T (divisibleBy3 n || divisibleBy5 n)

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) => \lam x y => T-lem

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => \lam x y t => sigmaEq (\lam n => isMultipleOf3Or5 n) x y t T-lem

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) => (\lam a => (\lam x y => (sym (a.2 x)) *> (a.2 y), a.1), \lam a => (a.2, \lam a1 => a.1 a.2 a1))

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func T' {A B : \Type} (x : Either A B) : \Type \elim x
  | Either.inl a => \Sigma
  | Either.inr b => Empty

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty =>
  transport T' ((p {\Sigma} {\Sigma} Unit-isProp Unit-isProp) (Either.inl ()) (Either.inr ()))  ()

-- 5. Докажите, что \Sigma сохраняет утверждения.

\func Sigma-isProp {A : \Type} (pA : isProp A) (B : A -> \Type)
                    (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Sigma (x : A) (B x))
  => Sigma'-isProp B pA pB -- :)

-- 6. Докажите, что LessOrEq и LessOrEq' являются предикатами.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\data LessOrEq' (n m : Nat) : \Set0 \elim m
  | suc m => <=-step (LessOrEq' n m)
  | m => <=-refl (n = m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) \elim n, m
  | 0, _ => \lam x y => \case \elim x, \elim y \with {
    | z<=n, z<=n => idp
  }
  | suc n, 0 => \lam x y => \case \elim x, \elim y \with {}
  | suc n, suc n1 => \lam x y => \case \elim x, \elim y \with {
    | s<=s l, s<=s l1 => pmap s<=s (LessOrEq-isProp l l1)
  }

-- Для решения LessOrEq'-isProp понадобится тот факт, что Nat является множеством.
-- Сейчас доказывать это не нужно доказывать, доказательство будет приведено позже.
\func Nat-isSet : isSet Nat => {?}

\func LessOrEq'-isProp {n m : Nat} : isProp (LessOrEq' n m) => \lam x y => aux x y
    \where
      \func aux {n m : Nat} (x y : LessOrEq' n m) : x = y \elim n, m, x, y
        | n, m, <=-refl =, <=-refl =1 => pmap <=-refl ((Nat-isSet n m) = =1)
        | n, suc m, <=-step l, <=-step l1 => pmap <=-step (aux l l1)
        | n, suc m, <=-step l, <=-refl = => absurd (sucLessOrEq' l =)
        | n, suc m, <=-refl =, <=-step l => absurd (sucLessOrEq' l =)
      \func sucLessOrEq' {n m : Nat} (l : LessOrEq' n m) (eq : n = suc m) : Empty \elim n, m, l
        | 0, m, _ => absurd (zero/=suc m eq)
        | suc n, 0, <=-refl = => absurd (zero/=suc n (sym =))
        | suc n, suc n1, <=-step l => sucLessOrEq' (decLessOrEq' l) (pmap dec eq)
        | suc n, suc n1, <=-refl = => absurd (n/=suc n1 (pmap dec ((sym =) *> eq)))
      \func decLessOrEq' {n m : Nat} (l : LessOrEq' (suc n) m ) : LessOrEq' n m \elim m, l
        | 0, <=-refl = => absurd (zero/=suc n (sym =))
        | suc n, <=-step l => <=-step (decLessOrEq' l)
        | suc n, <=-refl = => <=-step (<=-refl (pmap dec =))
      \func n/=suc (n : Nat) (p : n = suc n) : Empty \elim n
        | 0 => zero/=suc 0 p
        | suc n => n/=suc n (pmap dec p)

-- 7. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m) => \lam a b => aux n m a b
    \where
      \func aux (n m : Nat) (a b : ReflClosure (\lam x y => T (x < y)) n m) : a = b \elim a, b
        | refl =1, refl =2 => pmap refl (Nat-isSet n m =1 =2)
        | refl =, inc r => absurd (lessNotEqual r =)
        | inc r, refl = => absurd (lessNotEqual r =)
        | inc r, inc r1 => pmap inc T-lem
      \func lessNotEqual {n m : Nat} (p : T (n < m)) (q : n = m) : Empty \elim n, m, p
        | 0, suc n, p => absurd (zero/=suc n q)
        | suc n, suc n1, p => lessNotEqual p (pmap dec q)

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty =>
  transport (\lam x => \case \elim x \with {
    | refl = => Empty
    | inc r => \Sigma
  }) (p 1 1 (inc (s<=s z<=n)) (refl idp)) ()

-- 8. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A => \lam x y => (p x y) (q (f x) (f y))

-- 9. Докажите, что тип с разрешимым равенством является множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A => {?}

-- 10. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) => {?}

-- 11. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) => {?}

-- 12. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => {?}
